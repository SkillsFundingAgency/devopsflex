//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace DevOpsFlex.DSL
{
	/// <summary>
	/// DomainRelationship DevOpsSystemHasDevOpsAlerted
	/// Description for DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted
	/// </summary>
	[DslDesign::DisplayNameResource("DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted.DisplayName", typeof(global::DevOpsFlex.DSL.DevOpsFlexDomainModel), "DevOpsFlex.DSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted.Description", typeof(global::DevOpsFlex.DSL.DevOpsFlexDomainModel), "DevOpsFlex.DSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::DevOpsFlex.DSL.DevOpsFlexDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("988ea64a-5ec1-49e7-a2f4-7948abba5b7e")]
	public partial class DevOpsSystemHasDevOpsAlerted : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DevOpsSystemHasDevOpsAlerted domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x988ea64a, 0x5ec1, 0x49e7, 0xa2, 0xf4, 0x79, 0x48, 0xab, 0xba, 0x5b, 0x7e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DevOpsSystemHasDevOpsAlerted link in the same Partition as the given DevOpsSystem
		/// </summary>
		/// <param name="source">DevOpsSystem to use as the source of the relationship.</param>
		/// <param name="target">DevOpsAlert to use as the target of the relationship.</param>
		public DevOpsSystemHasDevOpsAlerted(DevOpsSystem source, DevOpsAlert target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DevOpsSystemHasDevOpsAlerted.DevOpsSystemDomainRoleId, source), new DslModeling::RoleAssignment(DevOpsSystemHasDevOpsAlerted.DevOpsAlertDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DevOpsSystemHasDevOpsAlerted(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DevOpsSystemHasDevOpsAlerted(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DevOpsSystemHasDevOpsAlerted(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DevOpsSystemHasDevOpsAlerted(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DevOpsSystem domain role code
		
		/// <summary>
		/// DevOpsSystem domain role Id.
		/// </summary>
		public static readonly global::System.Guid DevOpsSystemDomainRoleId = new global::System.Guid(0x909fe42f, 0x7817, 0x470b, 0xa0, 0x49, 0xe1, 0x42, 0xf3, 0x3d, 0xa9, 0x30);
		
		/// <summary>
		/// DomainRole DevOpsSystem
		/// Description for DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted.DevOpsSystem
		/// </summary>
		[DslDesign::DisplayNameResource("DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted/DevOpsSystem.DisplayName", typeof(global::DevOpsFlex.DSL.DevOpsFlexDomainModel), "DevOpsFlex.DSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted/DevOpsSystem.Description", typeof(global::DevOpsFlex.DSL.DevOpsFlexDomainModel), "DevOpsFlex.DSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DevOpsAlerted", PropertyDisplayNameKey="DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted/DevOpsSystem.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("909fe42f-7817-470b-a049-e142f33da930")]
		public virtual DevOpsSystem DevOpsSystem
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DevOpsSystem)DslModeling::DomainRoleInfo.GetRolePlayer(this, DevOpsSystemDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DevOpsSystemDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DevOpsSystem of a DevOpsAlert
		/// <summary>
		/// Gets DevOpsSystem.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DevOpsSystem GetDevOpsSystem(DevOpsAlert element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DevOpsAlertDomainRoleId) as DevOpsSystem;
		}
		
		/// <summary>
		/// Sets DevOpsSystem.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDevOpsSystem(DevOpsAlert element, DevOpsSystem newDevOpsSystem)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DevOpsAlertDomainRoleId, newDevOpsSystem);
		}
		#endregion
		#region DevOpsAlert domain role code
		
		/// <summary>
		/// DevOpsAlert domain role Id.
		/// </summary>
		public static readonly global::System.Guid DevOpsAlertDomainRoleId = new global::System.Guid(0x93dbbcf6, 0xe644, 0x41bc, 0x94, 0x8e, 0x0f, 0x50, 0xff, 0xf5, 0xb2, 0x09);
		
		/// <summary>
		/// DomainRole DevOpsAlert
		/// Description for DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted.DevOpsAlert
		/// </summary>
		[DslDesign::DisplayNameResource("DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted/DevOpsAlert.DisplayName", typeof(global::DevOpsFlex.DSL.DevOpsFlexDomainModel), "DevOpsFlex.DSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted/DevOpsAlert.Description", typeof(global::DevOpsFlex.DSL.DevOpsFlexDomainModel), "DevOpsFlex.DSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DevOpsSystem", PropertyDisplayNameKey="DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted/DevOpsAlert.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("93dbbcf6-e644-41bc-948e-0f50fff5b209")]
		public virtual DevOpsAlert DevOpsAlert
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DevOpsAlert)DslModeling::DomainRoleInfo.GetRolePlayer(this, DevOpsAlertDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DevOpsAlertDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DevOpsAlerted of a DevOpsSystem
		/// <summary>
		/// Gets a list of DevOpsAlerted.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DevOpsAlert> GetDevOpsAlerted(DevOpsSystem element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DevOpsAlert>, DevOpsAlert>(element, DevOpsSystemDomainRoleId);
		}
		#endregion
		#region DevOpsSystem link accessor
		/// <summary>
		/// Get the list of DevOpsSystemHasDevOpsAlerted links to a DevOpsSystem.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted> GetLinksToDevOpsAlerted ( global::DevOpsFlex.DSL.DevOpsSystem devOpsSystemInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted>(devOpsSystemInstance, global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted.DevOpsSystemDomainRoleId);
		}
		#endregion
		#region DevOpsAlert link accessor
		/// <summary>
		/// Get the DevOpsSystemHasDevOpsAlerted link to a DevOpsAlert.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted GetLinkToDevOpsSystem (global::DevOpsFlex.DSL.DevOpsAlert devOpsAlertInstance)
		{
			global::System.Collections.Generic.IList<global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted>(devOpsAlertInstance, global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted.DevOpsAlertDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DevOpsAlert not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DevOpsSystemHasDevOpsAlerted instance accessors
		
		/// <summary>
		/// Get any DevOpsSystemHasDevOpsAlerted links between a given DevOpsSystem and a DevOpsAlert.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted> GetLinks( global::DevOpsFlex.DSL.DevOpsSystem source, global::DevOpsFlex.DSL.DevOpsAlert target )
		{
			global::System.Collections.Generic.List<global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted> outLinks = new global::System.Collections.Generic.List<global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted>();
			global::System.Collections.Generic.IList<global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted>(source, global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted.DevOpsSystemDomainRoleId);
			foreach ( global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted link in links )
			{
				if ( target.Equals(link.DevOpsAlert) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DevOpsSystemHasDevOpsAlerted link between a given DevOpsSystemand a DevOpsAlert.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted GetLink( global::DevOpsFlex.DSL.DevOpsSystem source, global::DevOpsFlex.DSL.DevOpsAlert target )
		{
			global::System.Collections.Generic.IList<global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted> links = DslModeling::DomainRoleInfo.GetElementLinks<global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted>(source, global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted.DevOpsSystemDomainRoleId);
			foreach ( global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted link in links )
			{
				if ( target.Equals(link.DevOpsAlert) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
