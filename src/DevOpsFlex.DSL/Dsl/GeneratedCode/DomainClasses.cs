//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace DevOpsFlex.DSL
{
	/// <summary>
	/// DomainClass DevOpsSystem
	/// Represents a DevOpsFlex System.
	/// </summary>
	[DslDesign::DisplayNameResource("DevOpsFlex.DSL.DevOpsSystem.DisplayName", typeof(global::DevOpsFlex.DSL.DevOpsFlexDomainModel), "DevOpsFlex.DSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("DevOpsFlex.DSL.DevOpsSystem.Description", typeof(global::DevOpsFlex.DSL.DevOpsFlexDomainModel), "DevOpsFlex.DSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::DevOpsFlex.DSL.DevOpsFlexDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("0d4d9f14-7ca8-405e-88f7-59e9c36fab13")]
	public partial class DevOpsSystem : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DevOpsSystem domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0d4d9f14, 0x7ca8, 0x405e, 0x88, 0xf7, 0x59, 0xe9, 0xc3, 0x6f, 0xab, 0x13);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DevOpsSystem(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DevOpsSystem(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x403c4358, 0x9728, 0x4d4f, 0x8f, 0xb7, 0x62, 0x6f, 0x4b, 0x02, 0x3b, 0x03);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for DevOpsFlex.DSL.DevOpsSystem.Name
		/// </summary>
		[DslDesign::DisplayNameResource("DevOpsFlex.DSL.DevOpsSystem/Name.DisplayName", typeof(global::DevOpsFlex.DSL.DevOpsFlexDomainModel), "DevOpsFlex.DSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DevOpsFlex.DSL.DevOpsSystem/Name.Description", typeof(global::DevOpsFlex.DSL.DevOpsFlexDomainModel), "DevOpsFlex.DSL.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("403c4358-9728-4d4f-8fb7-626f4b023b03")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DevOpsSystem.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<DevOpsSystem, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DevOpsSystem.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DevOpsSystem.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DevOpsSystem element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DevOpsSystem element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DevOpsAlerted opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DevOpsAlerted.
		/// Description for DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted.DevOpsSystem
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DevOpsAlert> DevOpsAlerted
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DevOpsAlert>, DevOpsAlert>(global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted.DevOpsSystemDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::DevOpsFlex.DSL.DevOpsAlert.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::DevOpsFlex.DSL.DevOpsAlert sourceDevOpsAlert1 = sourceElement as global::DevOpsFlex.DSL.DevOpsAlert;
			if (sourceDevOpsAlert1 != null)
			{
				// Create link for path DevOpsSystemHasDevOpsAlerted.DevOpsAlerted
				this.DevOpsAlerted.Add(sourceDevOpsAlert1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::DevOpsFlex.DSL.DevOpsAlert sourceDevOpsAlert1 = sourceElement as global::DevOpsFlex.DSL.DevOpsAlert;
			if (sourceDevOpsAlert1 != null)
			{
				// Delete link for path DevOpsSystemHasDevOpsAlerted.DevOpsAlerted
				
				foreach (DslModeling::ElementLink link in global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted.GetLinks((global::DevOpsFlex.DSL.DevOpsSystem)this, sourceDevOpsAlert1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted.DevOpsSystemDomainRoleId, global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted.DevOpsAlertDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace DevOpsFlex.DSL
{
	/// <summary>
	/// DomainClass DevOpsAlert
	/// Represents a DevOpsFlex Alert.
	/// </summary>
	[DslDesign::DisplayNameResource("DevOpsFlex.DSL.DevOpsAlert.DisplayName", typeof(global::DevOpsFlex.DSL.DevOpsFlexDomainModel), "DevOpsFlex.DSL.GeneratedCode.DomainModelResx")]
	[global::System.ComponentModel.Design.HelpKeyword("fabrikam.minimalwpf.exampleElement")]
	[DslDesign::DescriptionResource("DevOpsFlex.DSL.DevOpsAlert.Description", typeof(global::DevOpsFlex.DSL.DevOpsFlexDomainModel), "DevOpsFlex.DSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::DevOpsFlex.DSL.DevOpsFlexDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("425a8abc-2f80-4791-a0df-f26b86731047")]
	public partial class DevOpsAlert : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DevOpsAlert domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x425a8abc, 0x2f80, 0x4791, 0xa0, 0xdf, 0xf2, 0x6b, 0x86, 0x73, 0x10, 0x47);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DevOpsAlert(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DevOpsAlert(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xd5245012, 0x1be4, 0x4888, 0x8d, 0x61, 0xc7, 0x75, 0x73, 0xea, 0xbb, 0xc1);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = "Element";
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for DevOpsFlex.DSL.DevOpsAlert.Name
		/// </summary>
		[DslDesign::DisplayNameResource("DevOpsFlex.DSL.DevOpsAlert/Name.DisplayName", typeof(global::DevOpsFlex.DSL.DevOpsFlexDomainModel), "DevOpsFlex.DSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DevOpsFlex.DSL.DevOpsAlert/Name.Description", typeof(global::DevOpsFlex.DSL.DevOpsFlexDomainModel), "DevOpsFlex.DSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Element")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("d5245012-1be4-4888-8d61-c77573eabbc1")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DevOpsAlert.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<DevOpsAlert, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DevOpsAlert.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DevOpsAlert.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DevOpsAlert element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DevOpsAlert element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x452e049e, 0x1226, 0x4d3f, 0xb7, 0x7d, 0xa6, 0x21, 0x08, 0x4c, 0xb0, 0x6f);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for DevOpsFlex.DSL.DevOpsAlert.Description
		/// </summary>
		[DslDesign::DisplayNameResource("DevOpsFlex.DSL.DevOpsAlert/Description.DisplayName", typeof(global::DevOpsFlex.DSL.DevOpsFlexDomainModel), "DevOpsFlex.DSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DevOpsFlex.DSL.DevOpsAlert/Description.Description", typeof(global::DevOpsFlex.DSL.DevOpsFlexDomainModel), "DevOpsFlex.DSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("452e049e-1226-4d3f-b77d-a621084cb06f")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DevOpsAlert.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<DevOpsAlert, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DevOpsAlert.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DevOpsAlert.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DevOpsAlert element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DevOpsAlert element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Metric domain property code
		
		/// <summary>
		/// Metric domain property Id.
		/// </summary>
		public static readonly global::System.Guid MetricDomainPropertyId = new global::System.Guid(0xe6e60fd5, 0xfbcb, 0x4446, 0xb5, 0xb4, 0x0b, 0x56, 0x57, 0x6f, 0x83, 0x0e);
		
		/// <summary>
		/// Storage for Metric
		/// </summary>
		private global::System.String metricPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Metric domain property.
		/// Description for DevOpsFlex.DSL.DevOpsAlert.Metric
		/// </summary>
		[DslDesign::DisplayNameResource("DevOpsFlex.DSL.DevOpsAlert/Metric.DisplayName", typeof(global::DevOpsFlex.DSL.DevOpsFlexDomainModel), "DevOpsFlex.DSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("DevOpsFlex.DSL.DevOpsAlert/Metric.Description", typeof(global::DevOpsFlex.DSL.DevOpsFlexDomainModel), "DevOpsFlex.DSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e6e60fd5-fbcb-4446-b5b4-0b56576f830e")]
		public global::System.String Metric
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return metricPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MetricPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DevOpsAlert.Metric domain property.
		/// </summary>
		internal sealed partial class MetricPropertyHandler : DslModeling::DomainPropertyValueHandler<DevOpsAlert, global::System.String>
		{
			private MetricPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DevOpsAlert.Metric domain property value handler.
			/// </summary>
			public static readonly MetricPropertyHandler Instance = new MetricPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DevOpsAlert.Metric domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MetricDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DevOpsAlert element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.metricPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DevOpsAlert element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.metricPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DevOpsSystem opposite domain role accessor
		/// <summary>
		/// Gets or sets DevOpsSystem.
		/// Description for DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted.DevOpsAlert
		/// </summary>
		public virtual DevOpsSystem DevOpsSystem
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted.DevOpsAlertDomainRoleId) as DevOpsSystem;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::DevOpsFlex.DSL.DevOpsSystemHasDevOpsAlerted.DevOpsAlertDomainRoleId, value);
			}
		}
		#endregion
	}
}
