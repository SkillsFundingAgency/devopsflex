//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
using DslShell = global::Microsoft.VisualStudio.Modeling.Shell;
namespace DevOpsFlex.DSL
{
	/// <summary>
	/// Double-derived class to allow easier code customization.
	/// </summary>
	[global::System.ComponentModel.ToolboxItemFilterAttribute(global::DevOpsFlex.DSL.DevOpsFlexToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require)]
	internal partial class DevOpsFlexDocView : DevOpsFlexDocViewBase
	{
		/// <summary>
		/// Constructs a new DevOpsFlexDocView.
		/// </summary>
		public DevOpsFlexDocView(DslShell::ModelingDocData docData, global::System.IServiceProvider serviceProvider)
			: base(docData, serviceProvider)
		{
		}
	}

	/// <summary>
	/// Class that hosts the diagram surface in the Visual Studio document area.
	/// </summary>
	internal abstract class DevOpsFlexDocViewBase : DslShell::ModelingDocView
	{
		/// <summary>
		/// Instance of the selection pusher, used to notify VS on the current selection
		/// </summary>
		private DslShell::CurrentSelectionPusher selectionPusher;
		/// <summary>
		/// The content control used as the view's content
		/// </summary>
		private global::System.Windows.UIElement content = null;

		/// <summary>
		/// Constructs a new DevOpsFlexDocView.
		/// </summary>
		protected DevOpsFlexDocViewBase(DslShell::ModelingDocData docData, global::System.IServiceProvider serviceProvider) : base(docData, serviceProvider)
		{
			this.DocData.DocumentClosing += OnClosing;
		}

		private void OnClosing(object sender, System.EventArgs e)
		{
			this.DocData.DocumentClosing -= OnClosing;
			this.DisconnectFromModel();
		}

		/// <summary>
		/// Represents the view content
		/// </summary>
		public override object Content
		{
			get
			{
				if (content == null)
				{
					content = this.CreateControl();
				}
				return content;
			}
		}

		/// <summary>
		/// Control creation method
		/// </summary>
		protected abstract global::System.Windows.UIElement CreateControl();

		/// <summary>
		/// Required logic to connect/bind to the model
		/// </summary>
		protected abstract void ConnectToModel();

		/// <summary>
		/// Required logic to disconnect the model
		/// </summary>
		protected abstract void DisconnectFromModel();

		/// <summary>
		/// Implement object selection as a simple collection.
		/// </summary>
		/// <remarks>
		/// Base class has no implementation of this method so we'll need to
		/// provide a simple one.
		/// </remarks>
		/// <param name="count"></param>
		/// <param name="objects"></param>
		/// <param name="flags"></param>
		protected override void DoSelectObjects(uint count, object[] objects, uint flags)
		{
			base.SelectedElements.Clear();
			for (int i = 0; i < count && i < objects.Length; i++)
			{
				base.SelectedElements.Add(objects[i]);
			}
			this.OnSelectionChanged(null);
		}


		/// <summary>
		/// Component to push the selected item on the form to the PropertiesWindow
		/// </summary>
		protected DslShell::CurrentSelectionPusher SelectionPusher
		{
			get
			{
				if (this.selectionPusher == null)
				{
					this.selectionPusher = new DslShell::CurrentSelectionPusher(this.ServiceProvider, this);
				}
				return this.selectionPusher;
			}
		}

		/// <summary>
		/// Loads the view. Creates the WPF View control, hosts its, binds it to the RootElement, and subscribes to the selection
		/// of any WPF sub-control
		/// </summary>
		protected override bool LoadView()
		{
			base.LoadView();

			global::System.Diagnostics.Debug.Assert(this.DocData.RootElement!=null);

			bool returnValue = false;

			if (this.DocData.RootElement != null)
			{
				returnValue = true;
				this.ConnectToModel();
			}
			return returnValue;
		}

		/// <summary>
		/// Called when selection changes in this window.
		/// </summary>
		/// <remarks>
		/// Overriden to update the F1 help keyword for the selection.
		/// </remarks>
		/// <param name="e"></param>
		protected override void OnSelectionChanged(global::System.EventArgs e)
		{
			base.OnSelectionChanged(e);

			if(global::DevOpsFlex.DSL.DevOpsFlexHelpKeywordHelper.Instance != null)
			{
				DslModeling::ModelElement selectedElement = this.PrimarySelection as DslModeling::ModelElement;
				if(selectedElement != null)
				{
					string f1Keyword = global::DevOpsFlex.DSL.DevOpsFlexHelpKeywordHelper.Instance.GetHelpKeyword(selectedElement);

					
					if(!string.IsNullOrEmpty(f1Keyword) && this.SelectionHelpService != null)
					{
						this.SelectionHelpService.AddContextAttribute(string.Empty, f1Keyword, global::System.ComponentModel.Design.HelpKeywordType.F1Keyword);
					}
				}
			}
		}
	}
}

